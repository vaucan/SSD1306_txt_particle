/* The MIT License (MIT)

Copyright (c) 2016 vaucan

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#include "font.h"

#ifdef FONT8x8 
// 8x8 font 
// from https://community.particle.io/t/8x8-matrix-led-and-spark-io/2369
const char font_basic[FONTROWS][FONTCOLS] = {
 /*   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0000 (nul)
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0001
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0002
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0003
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0004
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0005
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0006
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0007
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0008
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0009
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000A
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000B
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000C
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000D
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000E
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000F
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0010
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0011
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0012
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0013
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0014
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0015
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0016
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0017
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0018
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0019
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001A
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001B
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001C
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001D
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001E 
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001F */
   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // ' '
  { 0x00, 0x06, 0x5F, 0x5F, 0x06, 0x00, 0x00, 0x00 }, // '!'
  { 0x00, 0x07, 0x07, 0x00, 0x07, 0x07, 0x00, 0x00 }, // '"'
  { 0x14, 0x7F, 0x7F, 0x14, 0x7F, 0x7F, 0x14, 0x00 }, // '#'
  { 0x24, 0x2E, 0x6B, 0x6B, 0x3A, 0x12, 0x00, 0x00 }, // '$'
  { 0x46, 0x66, 0x30, 0x18, 0x0C, 0x66, 0x62, 0x00 }, // '%'
  { 0x30, 0x7A, 0x4F, 0x5D, 0x37, 0x7A, 0x48, 0x00 }, // '&'
  { 0x04, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 }, // '''
  { 0x00, 0x1C, 0x3E, 0x63, 0x41, 0x00, 0x00, 0x00 }, // '('
  { 0x00, 0x41, 0x63, 0x3E, 0x1C, 0x00, 0x00, 0x00 }, // ')'
  { 0x08, 0x2A, 0x3E, 0x1C, 0x1C, 0x3E, 0x2A, 0x08 }, // '*'
  { 0x08, 0x08, 0x3E, 0x3E, 0x08, 0x08, 0x00, 0x00 }, // '+'
  { 0x00, 0x80, 0xE0, 0x60, 0x00, 0x00, 0x00, 0x00 }, // ','
  { 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00 }, // '-'
  { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00 }, // '.'
  { 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00 }, // '/'
  { 0x3E, 0x7F, 0x71, 0x59, 0x4D, 0x7F, 0x3E, 0x00 }, // '0'
  { 0x40, 0x42, 0x7F, 0x7F, 0x40, 0x40, 0x00, 0x00 }, // '1'
  { 0x62, 0x73, 0x59, 0x49, 0x6F, 0x66, 0x00, 0x00 }, // '2'
  { 0x22, 0x63, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00 }, // '3'
  { 0x18, 0x1C, 0x16, 0x53, 0x7F, 0x7F, 0x50, 0x00 }, // '4'
  { 0x27, 0x67, 0x45, 0x45, 0x7D, 0x39, 0x00, 0x00 }, // '5'
  { 0x3C, 0x7E, 0x4B, 0x49, 0x79, 0x30, 0x00, 0x00 }, // '6'
  { 0x03, 0x03, 0x71, 0x79, 0x0F, 0x07, 0x00, 0x00 }, // '7'
  { 0x36, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00 }, // '8'
  { 0x06, 0x4F, 0x49, 0x69, 0x3F, 0x1E, 0x00, 0x00 }, // '9'
  { 0x00, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00 }, // ':'
  { 0x00, 0x80, 0xE6, 0x66, 0x00, 0x00, 0x00, 0x00 }, // ';'
  { 0x08, 0x1C, 0x36, 0x63, 0x41, 0x00, 0x00, 0x00 }, // '<'
  { 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00 }, // '='
  { 0x00, 0x41, 0x63, 0x36, 0x1C, 0x08, 0x00, 0x00 }, // '>'
  { 0x02, 0x03, 0x51, 0x59, 0x0F, 0x06, 0x00, 0x00 }, // '?'
  { 0x3E, 0x7F, 0x41, 0x5D, 0x5D, 0x1F, 0x1E, 0x00 }, // '@'
  { 0x7C, 0x7E, 0x13, 0x13, 0x7E, 0x7C, 0x00, 0x00 }, // 'A'
  { 0x41, 0x7F, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00 }, // 'B'
  { 0x1C, 0x3E, 0x63, 0x41, 0x41, 0x63, 0x22, 0x00 }, // 'C'
  { 0x41, 0x7F, 0x7F, 0x41, 0x63, 0x3E, 0x1C, 0x00 }, // 'D'
  { 0x41, 0x7F, 0x7F, 0x49, 0x5D, 0x41, 0x63, 0x00 }, // 'E'
  { 0x41, 0x7F, 0x7F, 0x49, 0x1D, 0x01, 0x03, 0x00 }, // 'F'
  { 0x1C, 0x3E, 0x63, 0x41, 0x51, 0x73, 0x72, 0x00 }, // 'G'
  { 0x7F, 0x7F, 0x08, 0x08, 0x7F, 0x7F, 0x00, 0x00 }, // 'H'
  { 0x00, 0x41, 0x7F, 0x7F, 0x41, 0x00, 0x00, 0x00 }, // 'I'
  { 0x30, 0x70, 0x40, 0x41, 0x7F, 0x3F, 0x01, 0x00 }, // 'J'
  { 0x41, 0x7F, 0x7F, 0x08, 0x1C, 0x77, 0x63, 0x00 }, // 'K'
  { 0x41, 0x7F, 0x7F, 0x41, 0x40, 0x60, 0x70, 0x00 }, // 'L'
  { 0x7F, 0x7F, 0x0E, 0x1C, 0x0E, 0x7F, 0x7F, 0x00 }, // 'M'
  { 0x7F, 0x7F, 0x06, 0x0C, 0x18, 0x7F, 0x7F, 0x00 }, // 'N'
  { 0x1C, 0x3E, 0x63, 0x41, 0x63, 0x3E, 0x1C, 0x00 }, // 'O'
  { 0x41, 0x7F, 0x7F, 0x49, 0x09, 0x0F, 0x06, 0x00 }, // 'P'
  { 0x1E, 0x3F, 0x21, 0x71, 0x7F, 0x5E, 0x00, 0x00 }, // 'Q'
  { 0x41, 0x7F, 0x7F, 0x09, 0x19, 0x7F, 0x66, 0x00 }, // 'R'
  { 0x26, 0x6F, 0x4D, 0x59, 0x73, 0x32, 0x00, 0x00 }, // 'S'
  { 0x03, 0x41, 0x7F, 0x7F, 0x41, 0x03, 0x00, 0x00 }, // 'T'
  { 0x7F, 0x7F, 0x40, 0x40, 0x7F, 0x7F, 0x00, 0x00 }, // 'U'
  { 0x1F, 0x3F, 0x60, 0x60, 0x3F, 0x1F, 0x00, 0x00 }, // 'V'
  { 0x7F, 0x7F, 0x30, 0x18, 0x30, 0x7F, 0x7F, 0x00 }, // 'W'
  { 0x43, 0x67, 0x3C, 0x18, 0x3C, 0x67, 0x43, 0x00 }, // 'X'
  { 0x07, 0x4F, 0x78, 0x78, 0x4F, 0x07, 0x00, 0x00 }, // 'Y'
  { 0x47, 0x63, 0x71, 0x59, 0x4D, 0x67, 0x73, 0x00 }, // 'Z'
  { 0x00, 0x7F, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00 }, // '['
  { 0x01, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00 }, // backslash
  { 0x00, 0x41, 0x41, 0x7F, 0x7F, 0x00, 0x00, 0x00 }, // ']'
  { 0x08, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x08, 0x00 }, // '^'
  { 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 }, // '_'
  { 0x00, 0x00, 0x03, 0x07, 0x04, 0x00, 0x00, 0x00 }, // '`'
  { 0x20, 0x74, 0x54, 0x54, 0x3C, 0x78, 0x40, 0x00 }, // 'a'
  { 0x41, 0x7F, 0x3F, 0x48, 0x48, 0x78, 0x30, 0x00 }, // 'b'
  { 0x38, 0x7C, 0x44, 0x44, 0x6C, 0x28, 0x00, 0x00 }, // 'c'
  { 0x30, 0x78, 0x48, 0x49, 0x3F, 0x7F, 0x40, 0x00 }, // 'd'
  { 0x38, 0x7C, 0x54, 0x54, 0x5C, 0x18, 0x00, 0x00 }, // 'e'
  { 0x48, 0x7E, 0x7F, 0x49, 0x03, 0x02, 0x00, 0x00 }, // 'f'
  { 0x98, 0xBC, 0xA4, 0xA4, 0xF8, 0x7C, 0x04, 0x00 }, // 'g'
  { 0x41, 0x7F, 0x7F, 0x08, 0x04, 0x7C, 0x78, 0x00 }, // 'h'
  { 0x00, 0x44, 0x7D, 0x7D, 0x40, 0x00, 0x00, 0x00 }, // 'i'
  { 0x60, 0xE0, 0x80, 0x80, 0xFD, 0x7D, 0x00, 0x00 }, // 'j'
  { 0x41, 0x7F, 0x7F, 0x10, 0x38, 0x6C, 0x44, 0x00 }, // 'k'
  { 0x00, 0x41, 0x7F, 0x7F, 0x40, 0x00, 0x00, 0x00 }, // 'l'
  { 0x7C, 0x7C, 0x18, 0x38, 0x1C, 0x7C, 0x78, 0x00 }, // 'm'
  { 0x7C, 0x7C, 0x04, 0x04, 0x7C, 0x78, 0x00, 0x00 }, // 'n'
  { 0x38, 0x7C, 0x44, 0x44, 0x7C, 0x38, 0x00, 0x00 }, // 'o'
  { 0x84, 0xFC, 0xF8, 0xA4, 0x24, 0x3C, 0x18, 0x00 }, // 'p'
  { 0x18, 0x3C, 0x24, 0xA4, 0xF8, 0xFC, 0x84, 0x00 }, // 'q'
  { 0x44, 0x7C, 0x78, 0x4C, 0x04, 0x1C, 0x18, 0x00 }, // 'r'
  { 0x48, 0x5C, 0x54, 0x54, 0x74, 0x24, 0x00, 0x00 }, // 's'
  { 0x00, 0x04, 0x3E, 0x7F, 0x44, 0x24, 0x00, 0x00 }, // 't'
  { 0x3C, 0x7C, 0x40, 0x40, 0x3C, 0x7C, 0x40, 0x00 }, // 'u'
  { 0x1C, 0x3C, 0x60, 0x60, 0x3C, 0x1C, 0x00, 0x00 }, // 'v'
  { 0x3C, 0x7C, 0x70, 0x38, 0x70, 0x7C, 0x3C, 0x00 }, // 'w'
  { 0x44, 0x6C, 0x38, 0x10, 0x38, 0x6C, 0x44, 0x00 }, // 'x'
  { 0x9C, 0xBC, 0xA0, 0xA0, 0xFC, 0x7C, 0x00, 0x00 }, // 'y'
  { 0x4C, 0x64, 0x74, 0x5C, 0x4C, 0x64, 0x00, 0x00 }, // 'z'
  { 0x08, 0x08, 0x3E, 0x77, 0x41, 0x41, 0x00, 0x00 }, // '{'
  { 0x00, 0x00, 0x00, 0x77, 0x77, 0x00, 0x00, 0x00 }, // '|'
  { 0x41, 0x41, 0x77, 0x3E, 0x08, 0x08, 0x00, 0x00 }, // '}'
  { 0x02, 0x03, 0x01, 0x03, 0x02, 0x03, 0x01, 0x00 }, // '~'
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}    // U+007F
};
#endif

#ifdef FONT5x8
// 5x8 font CURRENTLY NOT WORKING, CHARACTERS MIRRORED IN Y DIM
// from http://www.instructables.com/id/LED-Scolling-Dot-Matrix-Font-Graphics-Generator-/
// by roznerd
const char font_basic[FONTROWS][FONTCOLS] = {
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // (space)
    { 0x00, 0x00, 0xFD, 0x00, 0x00}, //  !
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // " TODO
    { 0x24, 0xFF, 0x24, 0xFF, 0x24}, //  #
    { 0x12, 0x2A, 0x7F, 0x2A, 0x24}, //  $
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // % TODO
    { 0x76, 0x89, 0x95, 0x62, 0x05}, //  &
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // '
    { 0x00, 0x3C, 0x42, 0x81, 0x00}, //  (
    { 0x00, 0x81, 0x42, 0x3C, 0x00}, //  )
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // * TODO
    { 0x08, 0x08, 0x3E, 0x08, 0x08}, //  +
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // , TODO
    { 0x08, 0x08, 0x08, 0x08, 0x08}, //  -
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // . TODO
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // / TODO
    { 0x7E, 0x89, 0x91, 0xA1, 0x7E}, //  0
    {0x00, 0x41, 0xFF, 0x01, 0x00}, //  1
    {0x43, 0x85, 0x89, 0x91, 0x61}, //  2
    {0x42, 0x81, 0x91, 0x91, 0x6E}, //  3
    {0x18, 0x28, 0x48, 0xFF, 0x08}, //  4
    {0xF2, 0x91, 0x91, 0x91, 0x8E}, //  5
    {0x1E, 0x29, 0x49, 0x89, 0x86}, //  6
    {0x80, 0x8F, 0x90, 0xA0, 0xC0}, //  7
    {0x6E, 0x91, 0x91, 0x91, 0x6E}, //  8
    {0x70, 0x89, 0x89, 0x8A, 0x7C}, //  9
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // : TODO
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // ; TODO
    { 0x08, 0x1C, 0x2A, 0x08, 0x08}, //  L arrow
    {0x14, 0x14, 0x14, 0x14, 0x14}, //  =
    {0x10, 0x10, 0x54, 0x38, 0x10}, //  R arrow
    {0x60, 0x80, 0x8D, 0x90, 0x60}, //  ?
    {0x66, 0x89, 0x8F, 0x81, 0x7E}, //  @
    {0x7F, 0x88, 0x88, 0x88, 0x7F}, //  A
    {0xFF, 0x91, 0x91, 0x91, 0x6E}, //  B
    {0x7E, 0x81, 0x81, 0x81, 0x42}, //  C
    {0xFF, 0x81, 0x81, 0x42, 0x3C}, //  D
    {0xFF, 0x91, 0x91, 0x91, 0x81}, //  E
    {0xFF, 0x90, 0x90, 0x90, 0x80}, //  F
    {0x7E, 0x81, 0x89, 0x89, 0x4E}, //  G
    {0xFF, 0x10, 0x10, 0x10, 0xFF}, //  H
    {0x81, 0x81, 0xFF, 0x81, 0x81}, //  I
    {0x06, 0x01, 0x01, 0x01, 0xFE}, //  J
    {0xFF, 0x18, 0x24, 0x42, 0x81}, //  K
    {0xFF, 0x01, 0x01, 0x01, 0x01}, //  L
    {0xFF, 0x40, 0x30, 0x40, 0xFF}, //  M
    {0xFF, 0x40, 0x30, 0x08, 0xFF}, //  N
    {0x7E, 0x81, 0x81, 0x81, 0x7E}, //  O
    {0xFF, 0x88, 0x88, 0x88, 0x70}, //  P
    {0x7E, 0x81, 0x85, 0x82, 0x7D}, //  Q
    {0xFF, 0x88, 0x8C, 0x8A, 0x71}, //  R
    {0x61, 0x91, 0x91, 0x91, 0x8E}, //  S
    {0x80, 0x80, 0xFF, 0x80, 0x80}, //  T
    {0xFE, 0x01, 0x01, 0x01, 0xFE}, //  U
    {0xF0, 0x0C, 0x03, 0x0C, 0xF0}, //  V
    {0xFF, 0x02, 0x0C, 0x02, 0xFF}, //  W
    {0xC3, 0x24, 0x18, 0x24, 0xC3}, //  X
    {0xE0, 0x10, 0x0F, 0x10, 0xE0}, //  Y
    {0x83, 0x85, 0x99, 0xA1, 0xC1}, //  Z
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // [ TODO
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // \ TODO
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // ] TODO
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // ^ TODO
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // _ TODO
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // ` TODO 
    {0x06, 0x29, 0x29, 0x29, 0x1F}, //  a
    {0xFF, 0x09, 0x11, 0x11, 0x0E}, //  b
    {0x1E, 0x21, 0x21, 0x21, 0x12}, //  c
    {0x0E, 0x11, 0x11, 0x09, 0xFF}, //  d
    {0x0E, 0x15, 0x15, 0x15, 0x0C}, //  e
    {0x08, 0x7F, 0x88, 0x80, 0x40}, //  f
    {0x30, 0x49, 0x49, 0x49, 0x7E}, //  g
    {0xFF, 0x08, 0x10, 0x10, 0x0F}, //  h
    {0x00, 0x00, 0x5F, 0x00, 0x00}, //  i
    {0x02, 0x01, 0x21, 0xBE, 0x00}, //  j
    {0xFF, 0x04, 0x0A, 0x11, 0x00}, //  k
    {0x00, 0x81, 0xFF, 0x01, 0x00}, //  l
    {0x3F, 0x20, 0x18, 0x20, 0x1F}, //  m
    {0x3F, 0x10, 0x20, 0x20, 0x1F}, //  n
    {0x0E, 0x11, 0x11, 0x11, 0x0E}, //  o
    {0x3F, 0x24, 0x24, 0x24, 0x18}, //  p
    {0x10, 0x28, 0x28, 0x18, 0x3F}, //  q
    {0x1F, 0x08, 0x10, 0x10, 0x08}, //  r
    {0x09, 0x15, 0x15, 0x15, 0x02}, //  s
    {0x20, 0xFE, 0x21, 0x01, 0x02}, //  t
    {0x1E, 0x01, 0x01, 0x02, 0x1F}, //  u
    {0x1C, 0x02, 0x01, 0x02, 0x1C}, //  v
    {0x1E, 0x01, 0x0E, 0x01, 0x1E}, //  w
    {0x11, 0x0A, 0x04, 0x0A, 0x11}, //  x
    {0x00, 0x39, 0x05, 0x05, 0x3E}, //  y
    {0x11, 0x13, 0x15, 0x19, 0x11}, //  z
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // { TODO
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // | TODO
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // } TODO
    { 0x00, 0x00, 0x00, 0x00, 0x00}, // ~ TODO
    { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF} //  5x8 block
};
#endif
    
// Prints one character to a display with 
// a SSD1306 controller/driver.
// Returns the number of bytes written, just as
// Wire.write(). 
byte printc(char c, const char font[][FONTCOLS]) {
    byte b = (byte) c;
    byte bArr[FONTCOLS];
    int k;
    
    // check that FONTCOLS is < FONTCOLS since
    // Wire.write(data,length) only transmits max 32
    // bytes in one go.
    
    for (k=0; k<FONTCOLS; k++)
        bArr[k] = (byte) font[b-32][k];
    
    if (b < 32) // do not print anything for the 32 first chars in ASCII table
        return 0;
    // don't print anything for chars beyond the last defined mapping    
    else if ((b-32) > FONTROWS) 
        return 0;
    else 
        return Wire.write(bArr,FONTCOLS);

}
